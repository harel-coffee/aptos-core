//**** Cross-compiled for `masm` syntax from `tests/no-v1-comparison/closures/bug_16684.move`

//# publish
// Bytecode version v8
module 0xc0ffee::m
use 0x1::vector
struct Resource
  _0: u64

// Function definition at index 0
fun apply<T0>(l0: ||vector<T0>): vector<T0>
    move_loc l0
    call_closure <||vector<T0>>
    ret

// Function definition at index 1
#[persistent] public fun test10(): vector<u64>
    local l0: vector<u64>
    local l1: |&mut vector<u64>|
    ld_const<vector<u64>> [1, 2, 3]
    st_loc l0
    ld_u64 4
    pack_closure __lambda__1__test10, 1
    st_loc l1
    // @5
    mut_borrow_loc l0
    move_loc l1
    call_closure <|&mut vector<u64>|>
    move_loc l0
    ret

// Function definition at index 2
#[persistent] public fun test1a(): vector<u64>
    pack_closure __lambda__1__test1a, 0
    call_closure <||vector<u64>>
    ret

// Function definition at index 3
#[persistent] public fun test1b(): vector<u64>
    pack_closure __lambda__1__test1b, 0
    call_closure <||vector<u64>>
    ret

// Function definition at index 4
#[persistent] public fun test2a(): vector<u64>
    pack_closure __lambda__1__test2a, 0
    call_closure <||vector<u64>>
    ret

// Function definition at index 5
#[persistent] public fun test2b(): vector<u64>
    pack_closure __lambda__1__test2b, 0
    call_closure <||vector<u64>>
    ret

// Function definition at index 6
#[persistent] public fun test3a<T0>(): vector<T0>
    pack_closure __lambda__1__test3a<T0>, 0
    call_closure <||vector<T0>>
    ret

// Function definition at index 7
#[persistent] public fun test3b<T0>(): vector<T0>
    pack_closure __lambda__1__test3b<T0>, 0
    call_closure <||vector<T0>>
    ret

// Function definition at index 8
#[persistent] public fun test4a<T0>(): vector<T0>
    pack_closure __lambda__1__test4a<T0>, 0
    call_closure <||vector<T0>>
    ret

// Function definition at index 9
#[persistent] public fun test4b<T0>(): vector<T0>
    pack_closure __lambda__1__test4b<T0>, 0
    call_closure <||vector<T0>>
    ret

// Function definition at index 10
#[persistent] public fun test5(): vector<u64>
    pack_closure __lambda__2__test5, 0
    call_closure <||vector<u64>>
    ret

// Function definition at index 11
#[persistent] public fun test6(): vector<u64>
    local l0: |u64|vector<u64>
    pack_closure vector::singleton<u64>, 0
    st_loc l0
    ld_u64 42
    move_loc l0
    call_closure <|u64|vector<u64>>
    // @5
    ret

// Function definition at index 12
#[persistent] public fun test7()
    local l0: |vector<Resource>|
    pack_closure __lambda__1__test7, 0
    st_loc l0
    vec_pack <Resource>, 0
    move_loc l0
    call_closure <|vector<Resource>|>
    // @5
    ret

// Function definition at index 13
#[persistent] public fun test8(): u64
    local l0: |&vector<u64>|u64
    local l1: vector<u64>
    pack_closure __lambda__1__test8, 0
    st_loc l0
    ld_const<vector<u64>> [1, 2, 3]
    st_loc l1
    borrow_loc l1
    // @5
    move_loc l0
    call_closure <|&vector<u64>|u64>
    ret

// Function definition at index 14
#[persistent] public fun test9a(): vector<u64>
    local l0: vector<u64>
    local l1: |&mut vector<u64>, u64, u64|
    ld_const<vector<u64>> [1, 2, 3]
    st_loc l0
    pack_closure __lambda__1__test9a, 0
    st_loc l1
    mut_borrow_loc l0
    // @5
    ld_u64 0
    ld_u64 2
    move_loc l1
    call_closure <|&mut vector<u64>, u64, u64|>
    move_loc l0
    // @10
    ret

// Function definition at index 15
#[persistent] public fun test9b(): vector<u64>
    local l0: vector<u64>
    local l1: |&mut vector<u64>, u64, u64|
    ld_const<vector<u64>> [1, 2, 3]
    st_loc l0
    pack_closure __lambda__1__test9b, 0
    st_loc l1
    mut_borrow_loc l0
    // @5
    ld_u64 0
    ld_u64 2
    move_loc l1
    call_closure <|&mut vector<u64>, u64, u64|>
    move_loc l0
    // @10
    ret

// Function definition at index 16
fun __lambda__1__test10(l0: u64, l1: &mut vector<u64>)
    move_loc l1
    move_loc l0
    vec_push_back <u64>
    ret

// Function definition at index 17
fun __lambda__1__test1a(): vector<u64>
    vec_pack <u64>, 0
    ret

// Function definition at index 18
fun __lambda__1__test1b(): vector<u64>
    vec_pack <u64>, 0
    ret

// Function definition at index 19
fun __lambda__1__test2a(): vector<u64>
    vec_pack <u64>, 0
    ret

// Function definition at index 20
fun __lambda__1__test2b(): vector<u64>
    vec_pack <u64>, 0
    ret

// Function definition at index 21
fun __lambda__1__test3a<T0>(): vector<T0>
    vec_pack <T0>, 0
    ret

// Function definition at index 22
fun __lambda__1__test3b<T0>(): vector<T0>
    vec_pack <T0>, 0
    ret

// Function definition at index 23
fun __lambda__1__test4a<T0>(): vector<T0>
    vec_pack <T0>, 0
    ret

// Function definition at index 24
fun __lambda__1__test4b<T0>(): vector<T0>
    vec_pack <T0>, 0
    ret

// Function definition at index 25
fun __lambda__1__test5(): vector<u64>
    vec_pack <u64>, 0
    ret

// Function definition at index 26
fun __lambda__2__test5(): vector<u64>
    pack_closure __lambda__1__test5, 0
    call apply<u64>
    ret

// Function definition at index 27
fun __lambda__1__test7(l0: vector<Resource>)
    move_loc l0
    vec_unpack <Resource>, 0
    ret

// Function definition at index 28
fun __lambda__1__test8(l0: &vector<u64>): u64
    move_loc l0
    vec_len <u64>
    ret

// Function definition at index 29
fun __lambda__1__test9a(l0: &mut vector<u64>, l1: u64, l2: u64)
    move_loc l0
    move_loc l1
    move_loc l2
    vec_swap <u64>
    ret

// Function definition at index 30
fun __lambda__1__test9b(l0: &mut vector<u64>, l1: u64, l2: u64)
    move_loc l0
    move_loc l1
    move_loc l2
    vec_swap <u64>
    ret



//# run 0xc0ffee::m::test1a

//# run 0xc0ffee::m::test1b

//# run 0xc0ffee::m::test2a

//# run 0xc0ffee::m::test2b

//# run 0xc0ffee::m::test3a --type-args u64

//# run 0xc0ffee::m::test3b --type-args u16

//# run 0xc0ffee::m::test4a --type-args u32

//# run 0xc0ffee::m::test4b --type-args u128

//# run 0xc0ffee::m::test5

//# run 0xc0ffee::m::test6

//# run 0xc0ffee::m::test7

//# run 0xc0ffee::m::test8

//# run 0xc0ffee::m::test9a

//# run 0xc0ffee::m::test9b

//# run 0xc0ffee::m::test10