//**** Cross-compiled for `masm` syntax from `tests/simplifier/constant_folding_failure.move`

//# publish
// Bytecode version v8
module 0xcafe::ConstantFailure
// Function definition at index 0
fun main()
    local l0: vector<u8>
    local l1: vector<u16>
    local l2: vector<u32>
    local l3: vector<u64>
    local l4: vector<u128>
    local l5: vector<u256>
    local l6: u16
    local l7: u32
    local l8: u64
    local l9: u128
    local l10: u256
    ld_u8 1
    ld_u8 8
    shl
    ld_u8 0
    ld_u8 8
    // @5
    shr
    ld_u8 1
    ld_u8 0
    div
    ld_u8 1
    // @10
    ld_u8 0
    mod
    ld_u8 255
    ld_u8 255
    add
    // @15
    ld_u8 0
    ld_u8 1
    sub
    ld_u64 256
    cast_u8
    // @20
    vec_pack <u8>, 7
    st_loc l0
    ld_u16 1
    ld_u8 16
    shl
    // @25
    ld_u16 0
    ld_u8 16
    shr
    ld_u16 1
    ld_u16 0
    // @30
    div
    ld_u16 1
    ld_u16 0
    mod
    ld_u16 65535
    // @35
    ld_u16 65535
    add
    ld_u16 0
    ld_u16 1
    sub
    // @40
    ld_u64 65536
    cast_u16
    vec_pack <u16>, 7
    st_loc l1
    ld_u32 1
    // @45
    ld_u8 32
    shl
    ld_u8 1
    ld_u8 8
    shl
    // @50
    cast_u32
    ld_u16 1
    ld_u8 16
    shl
    cast_u32
    // @55
    ld_u32 0
    ld_u8 32
    shr
    ld_u8 0
    ld_u8 8
    // @60
    shr
    cast_u32
    ld_u16 0
    ld_u8 16
    shr
    // @65
    cast_u32
    ld_u32 1
    ld_u32 0
    div
    ld_u32 1
    // @70
    ld_u32 0
    mod
    ld_u32 4294967295
    ld_u32 4294967295
    add
    // @75
    ld_u16 65535
    ld_u16 65535
    add
    cast_u32
    ld_u16 65535
    // @80
    ld_u16 65535
    add
    cast_u32
    ld_u16 65535
    ld_u16 65535
    // @85
    add
    cast_u32
    ld_u32 0
    ld_u32 1
    sub
    // @90
    ld_u128 4294967296
    cast_u32
    vec_pack <u32>, 14
    st_loc l2
    ld_u64 1
    // @95
    ld_u8 64
    shl
    ld_u32 1
    ld_u8 32
    shl
    // @100
    cast_u64
    ld_u64 0
    ld_u8 64
    shr
    ld_u32 0
    // @105
    ld_u8 32
    shr
    cast_u64
    ld_u64 1
    ld_u64 0
    // @110
    div
    ld_u64 1
    ld_u64 0
    mod
    ld_u64 18446744073709551615
    // @115
    ld_u64 18446744073709551615
    add
    ld_u8 255
    ld_u8 255
    add
    // @120
    cast_u64
    ld_u8 255
    ld_u8 255
    add
    cast_u64
    // @125
    ld_u8 255
    ld_u8 255
    add
    cast_u64
    ld_u32 4294967295
    // @130
    ld_u32 4294967295
    add
    cast_u64
    ld_u32 4294967295
    ld_u32 4294967295
    // @135
    add
    cast_u64
    ld_u32 4294967295
    ld_u32 4294967295
    add
    // @140
    cast_u64
    ld_u64 0
    ld_u64 1
    sub
    ld_u128 340282366920938463463374607431768211450
    // @145
    cast_u64
    vec_pack <u64>, 15
    st_loc l3
    ld_u128 1
    ld_u8 128
    // @150
    shl
    ld_u64 1
    ld_u8 64
    shl
    cast_u128
    // @155
    ld_u128 0
    ld_u8 128
    shr
    ld_u64 0
    ld_u8 64
    // @160
    shr
    cast_u128
    ld_u128 1
    ld_u128 0
    div
    // @165
    ld_u128 1
    ld_u128 0
    mod
    ld_u128 340282366920938463463374607431768211450
    ld_u128 340282366920938463463374607431768211450
    // @170
    add
    ld_u64 18446744073709551615
    ld_u64 18446744073709551615
    add
    cast_u128
    // @175
    ld_u64 18446744073709551615
    ld_u64 18446744073709551615
    add
    cast_u128
    ld_u64 18446744073709551615
    // @180
    ld_u64 18446744073709551615
    add
    cast_u128
    ld_u128 0
    ld_u128 1
    // @185
    sub
    ld_u256 340282366920938463463374607431768211456
    cast_u128
    vec_pack <u128>, 12
    st_loc l4
    // @190
    ld_u128 1
    ld_u8 128
    shl
    cast_u256
    ld_u128 0
    // @195
    ld_u8 128
    shr
    cast_u256
    ld_u256 1
    ld_u256 0
    // @200
    div
    ld_u256 1
    ld_u256 0
    mod
    ld_u256 115792089237316195423570985008687907853269984665640564039457584007913129639935
    // @205
    ld_u256 115792089237316195423570985008687907853269984665640564039457584007913129639935
    add
    ld_u128 340282366920938463463374607431768211450
    ld_u128 340282366920938463463374607431768211450
    add
    // @210
    cast_u256
    ld_u128 340282366920938463463374607431768211450
    ld_u128 340282366920938463463374607431768211450
    add
    cast_u256
    // @215
    ld_u128 340282366920938463463374607431768211450
    ld_u128 340282366920938463463374607431768211450
    add
    cast_u256
    ld_u256 0
    // @220
    ld_u256 1
    sub
    vec_pack <u256>, 9
    st_loc l5
    borrow_loc l0
    // @225
    call sum_u8
    borrow_loc l1
    call sum_u16
    st_loc l6
    borrow_loc l2
    // @230
    call sum_u32
    st_loc l7
    borrow_loc l3
    call sum_u64
    st_loc l8
    // @235
    borrow_loc l4
    call sum_u128
    st_loc l9
    borrow_loc l5
    call sum_u256
    // @240
    st_loc l10
    ld_u8 0
    neq
    br_false l0
    move_loc l6
    // @245
    ld_u16 0
    neq
    br_false l1
    move_loc l7
    ld_u32 0
    // @250
    neq
    br_false l2
    move_loc l8
    ld_u64 0
    neq
    // @255
    br_false l3
    move_loc l9
    ld_u128 0
    neq
    br_false l4
    // @260
    move_loc l10
    ld_u256 0
    neq
    br_false l5
    ret
    // @265
l5: ld_u64 1
    abort
l4: ld_u64 1
    abort
l3: ld_u64 1
    // @270
    abort
l2: ld_u64 1
    abort
l1: ld_u64 1
    abort
    // @275
l0: ld_u64 1
    abort

// Function definition at index 1
fun sum_u128(l0: &vector<u128>): u128
    local l1: u128
    local l2: u64
    local l3: &u128
    ld_u128 0
    st_loc l1
    ld_u64 0
    st_loc l2
l1: copy_loc l2
    // @5
    copy_loc l0
    vec_len <u128>
    lt
    br_false l0
    copy_loc l0
    // @10
    copy_loc l2
    vec_borrow <u128>
    st_loc l3
    move_loc l1
    move_loc l3
    // @15
    read_ref
    add
    st_loc l1
    move_loc l2
    ld_u64 1
    // @20
    add
    st_loc l2
    branch l1
l0: move_loc l0
    pop
    // @25
    move_loc l1
    ret

// Function definition at index 2
fun sum_u16(l0: &vector<u16>): u16
    local l1: u16
    local l2: u64
    local l3: &u16
    ld_u16 0
    st_loc l1
    ld_u64 0
    st_loc l2
l1: copy_loc l2
    // @5
    copy_loc l0
    vec_len <u16>
    lt
    br_false l0
    copy_loc l0
    // @10
    copy_loc l2
    vec_borrow <u16>
    st_loc l3
    move_loc l1
    move_loc l3
    // @15
    read_ref
    add
    st_loc l1
    move_loc l2
    ld_u64 1
    // @20
    add
    st_loc l2
    branch l1
l0: move_loc l0
    pop
    // @25
    move_loc l1
    ret

// Function definition at index 3
fun sum_u256(l0: &vector<u256>): u256
    local l1: u256
    local l2: u64
    local l3: &u256
    ld_u256 0
    st_loc l1
    ld_u64 0
    st_loc l2
l1: copy_loc l2
    // @5
    copy_loc l0
    vec_len <u256>
    lt
    br_false l0
    copy_loc l0
    // @10
    copy_loc l2
    vec_borrow <u256>
    st_loc l3
    move_loc l1
    move_loc l3
    // @15
    read_ref
    add
    st_loc l1
    move_loc l2
    ld_u64 1
    // @20
    add
    st_loc l2
    branch l1
l0: move_loc l0
    pop
    // @25
    move_loc l1
    ret

// Function definition at index 4
fun sum_u32(l0: &vector<u32>): u32
    local l1: u32
    local l2: u64
    local l3: &u32
    ld_u32 0
    st_loc l1
    ld_u64 0
    st_loc l2
l1: copy_loc l2
    // @5
    copy_loc l0
    vec_len <u32>
    lt
    br_false l0
    copy_loc l0
    // @10
    copy_loc l2
    vec_borrow <u32>
    st_loc l3
    move_loc l1
    move_loc l3
    // @15
    read_ref
    add
    st_loc l1
    move_loc l2
    ld_u64 1
    // @20
    add
    st_loc l2
    branch l1
l0: move_loc l0
    pop
    // @25
    move_loc l1
    ret

// Function definition at index 5
fun sum_u64(l0: &vector<u64>): u64
    local l1: u64
    local l2: u64
    local l3: &u64
    ld_u64 0
    st_loc l1
    ld_u64 0
    st_loc l2
l1: copy_loc l2
    // @5
    copy_loc l0
    vec_len <u64>
    lt
    br_false l0
    copy_loc l0
    // @10
    copy_loc l2
    vec_borrow <u64>
    st_loc l3
    move_loc l1
    move_loc l3
    // @15
    read_ref
    add
    st_loc l1
    move_loc l2
    ld_u64 1
    // @20
    add
    st_loc l2
    branch l1
l0: move_loc l0
    pop
    // @25
    move_loc l1
    ret

// Function definition at index 6
fun sum_u8(l0: &vector<u8>): u8
    local l1: u8
    local l2: u64
    local l3: &u8
    ld_u8 0
    st_loc l1
    ld_u64 0
    st_loc l2
l1: copy_loc l2
    // @5
    copy_loc l0
    vec_len <u8>
    lt
    br_false l0
    copy_loc l0
    // @10
    copy_loc l2
    vec_borrow <u8>
    st_loc l3
    move_loc l1
    move_loc l3
    // @15
    read_ref
    add
    st_loc l1
    move_loc l2
    ld_u64 1
    // @20
    add
    st_loc l2
    branch l1
l0: move_loc l0
    pop
    // @25
    move_loc l1
    ret



//# run 0xcafe::ConstantFailure::main