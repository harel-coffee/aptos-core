//**** Cross-compiled for `masm` syntax from `tests/misc/largest_prime_factor.move`

//# publish
// Bytecode version v8
module 0xc0ffee::largest_prime_factor
// Function definition at index 0
#[persistent] public fun largest_prime_factor(l0: u64): u64
    local l1: u64
    local l2: u64
    local l3: bool
    ld_u64 1
    st_loc l1
    ld_u64 2
    st_loc l2
l4: copy_loc l2
    // @5
    copy_loc l0
    ld_u64 2
    div
    le
    br_false l0
    // @10
    copy_loc l0
    copy_loc l2
    mod
    ld_u64 0
    eq
    // @15
    br_false l1
    copy_loc l2
    call is_prime
    st_loc l3
l5: move_loc l3
    // @20
    br_true l2
    branch l3
l2: copy_loc l2
    st_loc l1
l3: move_loc l2
    // @25
    ld_u64 1
    add
    st_loc l2
    branch l4
l1: ld_false
    // @30
    st_loc l3
    branch l5
l0: copy_loc l0
    call is_prime
    br_true l6
    // @35
    branch l7
l6: move_loc l0
    st_loc l1
l7: move_loc l1
    ret

// Function definition at index 1
#[persistent] public fun is_prime(l0: u64): bool
    local l1: u64
    copy_loc l0
    ld_u64 2
    lt
    br_false l0
    ld_false
    // @5
    ret
l0: ld_u64 2
    st_loc l1
l3: copy_loc l1
    copy_loc l0
    // @10
    ld_u64 2
    div
    le
    br_false l1
    copy_loc l0
    // @15
    copy_loc l1
    mod
    ld_u64 0
    eq
    br_false l2
    // @20
    ld_false
    ret
l2: move_loc l1
    ld_u64 1
    add
    // @25
    st_loc l1
    branch l3
l1: ld_true
    ret

// Function definition at index 2
#[persistent] public fun test_largest_prime_factor()
    ld_u64 13195
    call largest_prime_factor
    ld_u64 29
    eq
    br_false l0
    // @5
    ret
l0: ld_u64 0
    abort



//# run 0xc0ffee::largest_prime_factor::test_largest_prime_factor